// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/auctions-service/protobuf/auctions_run_service.proto

package auctions_run_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunAuctionsServiceClient is the client API for RunAuctionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunAuctionsServiceClient interface {
	SuggestPrice(ctx context.Context, in *SuggestPriceRequest, opts ...grpc.CallOption) (*SuggestPriceResponse, error)
	GetCurrentPrice(ctx context.Context, opts ...grpc.CallOption) (RunAuctionsService_GetCurrentPriceClient, error)
}

type runAuctionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunAuctionsServiceClient(cc grpc.ClientConnInterface) RunAuctionsServiceClient {
	return &runAuctionsServiceClient{cc}
}

func (c *runAuctionsServiceClient) SuggestPrice(ctx context.Context, in *SuggestPriceRequest, opts ...grpc.CallOption) (*SuggestPriceResponse, error) {
	out := new(SuggestPriceResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RunAuctionsService/SuggestPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runAuctionsServiceClient) GetCurrentPrice(ctx context.Context, opts ...grpc.CallOption) (RunAuctionsService_GetCurrentPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &RunAuctionsService_ServiceDesc.Streams[0], "/protobuf.RunAuctionsService/GetCurrentPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &runAuctionsServiceGetCurrentPriceClient{stream}
	return x, nil
}

type RunAuctionsService_GetCurrentPriceClient interface {
	Send(*GetCurrentPriceRequest) error
	Recv() (*GetCurrentPriceResponse, error)
	grpc.ClientStream
}

type runAuctionsServiceGetCurrentPriceClient struct {
	grpc.ClientStream
}

func (x *runAuctionsServiceGetCurrentPriceClient) Send(m *GetCurrentPriceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runAuctionsServiceGetCurrentPriceClient) Recv() (*GetCurrentPriceResponse, error) {
	m := new(GetCurrentPriceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunAuctionsServiceServer is the server API for RunAuctionsService service.
// All implementations must embed UnimplementedRunAuctionsServiceServer
// for forward compatibility
type RunAuctionsServiceServer interface {
	SuggestPrice(context.Context, *SuggestPriceRequest) (*SuggestPriceResponse, error)
	GetCurrentPrice(RunAuctionsService_GetCurrentPriceServer) error
	mustEmbedUnimplementedRunAuctionsServiceServer()
}

// UnimplementedRunAuctionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRunAuctionsServiceServer struct {
}

func (UnimplementedRunAuctionsServiceServer) SuggestPrice(context.Context, *SuggestPriceRequest) (*SuggestPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestPrice not implemented")
}
func (UnimplementedRunAuctionsServiceServer) GetCurrentPrice(RunAuctionsService_GetCurrentPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCurrentPrice not implemented")
}
func (UnimplementedRunAuctionsServiceServer) mustEmbedUnimplementedRunAuctionsServiceServer() {}

// UnsafeRunAuctionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunAuctionsServiceServer will
// result in compilation errors.
type UnsafeRunAuctionsServiceServer interface {
	mustEmbedUnimplementedRunAuctionsServiceServer()
}

func RegisterRunAuctionsServiceServer(s grpc.ServiceRegistrar, srv RunAuctionsServiceServer) {
	s.RegisterService(&RunAuctionsService_ServiceDesc, srv)
}

func _RunAuctionsService_SuggestPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunAuctionsServiceServer).SuggestPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RunAuctionsService/SuggestPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunAuctionsServiceServer).SuggestPrice(ctx, req.(*SuggestPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunAuctionsService_GetCurrentPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunAuctionsServiceServer).GetCurrentPrice(&runAuctionsServiceGetCurrentPriceServer{stream})
}

type RunAuctionsService_GetCurrentPriceServer interface {
	Send(*GetCurrentPriceResponse) error
	Recv() (*GetCurrentPriceRequest, error)
	grpc.ServerStream
}

type runAuctionsServiceGetCurrentPriceServer struct {
	grpc.ServerStream
}

func (x *runAuctionsServiceGetCurrentPriceServer) Send(m *GetCurrentPriceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runAuctionsServiceGetCurrentPriceServer) Recv() (*GetCurrentPriceRequest, error) {
	m := new(GetCurrentPriceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunAuctionsService_ServiceDesc is the grpc.ServiceDesc for RunAuctionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunAuctionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.RunAuctionsService",
	HandlerType: (*RunAuctionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestPrice",
			Handler:    _RunAuctionsService_SuggestPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCurrentPrice",
			Handler:       _RunAuctionsService_GetCurrentPrice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/auctions-service/protobuf/auctions_run_service.proto",
}
